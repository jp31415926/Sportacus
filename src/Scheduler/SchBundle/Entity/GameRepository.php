<?php

namespace Scheduler\SchBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;
use Doctrine\DBAL\Connection;
use Scheduler\SchBundle\Entity\GameListCriteria;

/**
 * GameRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class GameRepository extends EntityRepository
{
  /**
   * @param boolean $onlyPublished
   * @return array
   */
  public function findAllOrderedByDate($onlyPublished)
  {
    if ($onlyPublished) {
      $q = 'SELECT p FROM SchedulerBundle:Game p ORDER BY p.date ASC, p.time ASC, p.location ASC';
    } else {
      $q = 'SELECT p FROM SchedulerBundle:Game p WHERE p.published = 1 ORDER BY p.date ASC, p.time ASC, p.location ASC';
    }
    return $this->getEntityManager()
      ->createQuery($q)
      ->getResult();
  }

  /**
   * @param int $officialId
   * @return array
   */
  public function findAllByOffcial($officialId)
  {
    $criteria = [
      'official_id' => $officialId,
    ];
    return $this->findGamesByCriteria($criteria);

    /* Obsolete
    $q = 'SELECT g FROM SchedulerBundle:Game g WHERE ' .
      "g.ref1=$uid OR g.ref2=$uid OR g.ref3=$uid " .
      'ORDER BY g.date ASC, g.time ASC';

    return $this->getEntityManager()
      ->createQuery($q)
      ->getResult();
    */
  }

  /**
   * @param $officialId
   * @param $projectId
   * @return array
   */
  public function findCompleteByOffcialAndProject($officialId, $projectId)
  {
    $criteria = [
      'published'   => true,
      'status_id'   => 2,
      'project_id'  => $projectId,
      'official_id' => $officialId,
    ];
    return $this->findGamesByCriteria($criteria);
    /* Obsolete
    $q = 'SELECT g FROM SchedulerBundle:Game g WHERE ' .
      'g.published=1 AND ' .
      'g.status=2 AND ' .
      "g.project=$projectid AND " .
      "(g.ref1=$uid OR g.ref2=$uid OR g.ref3=$uid) " .
      'ORDER BY g.date ASC, g.time ASC';

    return $this->getEntityManager()
      ->createQuery($q)
      ->getResult();
    */
  }

  /**
   * @param int $officialId
   * @param int $projectId
   * @return array
   */
  public function findAllByOffcialAndProject($officialId, $projectId)
  {
    $criteria = [
      'published'   => true,
      'project_id'  => $projectId,
      'official_id' => $officialId,
    ];
    return $this->findGamesByCriteria($criteria);

    /* Obsolete
    $q = 'SELECT g FROM SchedulerBundle:Game g WHERE ' .
      'g.published=1 AND ' .
      "g.project=$projectid AND " .
      "(g.ref1=$uid OR g.ref2=$uid OR g.ref3=$uid) " .
      'ORDER BY g.date ASC, g.time ASC';

    return $this->getEntityManager()
      ->createQuery($q)
      ->getResult();
    */
  }

  /* ==========================================
   * 13 Aug 2015
   * Use this as a test for querying for an array of ids
   * Need to refactor findGameIdsByCriteria
   * Sadly, named parameters do not work, only positional
   */
  public function findAllActiveByOffcial($officialId)
  {
    $dbConn = $this->getEntityManager()->getConnection();

    $qb = $dbConn->createQueryBuilder();

    $qb->addSelect('DISTINCT project_game.id AS id');

    $qb->from('Game','project_game');

    $qb->leftJoin(
      'project_game',
      'project_game_officials',
      'project_game_official',
      'project_game_official.project_game_id = project_game.id'
    );
    $qb->leftJoin(
      'project_game_official',
      'fos_user',
      'project_official',
      'project_game_official.project_official_id = project_official.id'
    );
//    $qb->andWhere('published   =   :published');
//    $qb->andWhere('status      IN (:status_ids)');
//    $qb->andWhere('official.id IN (:official_ids)');
    $qb->andWhere('published = ?');
    $qb->andWhere('status IN (?)');
    $qb->andWhere('project_official.id IN (?)');

    // Need to be able to handle array of status id's
    $params = [
      true,          // published
      [1,2],         // status_ids
      [$officialId], // official_ids
    ];
//    $params = [
//      'published'    => true,
//      'status_ids'   => [1,2],
//      'official_ids' => [$uid],
//    ];
    $types = [
      \PDO::PARAM_BOOL,
      Connection::PARAM_INT_ARRAY,
      Connection::PARAM_INT_ARRAY,
    ];
    $stmt = $dbConn->executeQuery($qb->getSQL(),$params,$types);
    $ids = [];
    while($row = $stmt->fetch()) {
      $ids[] = $row['id'];
    }
    return $this->findGamesByCriteria(['game_ids' => $ids]);

    /* Obsolete
    $q = 'SELECT g FROM SchedulerBundle:Game g WHERE ' .
      'g.published=1 AND ' .
      'g.status in (1,2) AND ' .
      "(g.ref1=$uid OR g.ref2=$uid OR g.ref3=$uid) " .
      'ORDER BY g.date ASC, g.time ASC';

    return $this->getEntityManager()
      ->createQuery($q)
      ->getResult();
    */
  }

  /**
   * @param Game $game
   * @param bool $all_games
   * @return array
   */
  public function findConflictsWithOtherGames(&$game, $all_games = false)
  {
    //$starttime = $game->getTime();
    //$endtime = $game->getEndTime(true);

    $rsm = new ResultSetMapping();
    $rsm->addEntityResult('SchedulerBundle:Game', 'g');
    $rsm->addFieldResult('g', 'id', 'id');

    // if this is an active game (published and not inactive) then
    // don't indicate conflicts with other inactive games.
    if ($game->isActive() || $game->isInactive()) {
      $p =
        'g.published=1 AND ' .
        'g.status in (0,1,2) AND '; // jp-inactive
    } else {
      $p = '';
    }

    if ($game->getLocation() != NULL) {
      $q = 'SELECT id FROM Game g WHERE ' .
        'g.id != :gameid AND ' .
        $p .
        'g.date=:date AND ' .
        '(g.time BETWEEN :starttime AND :endtime OR ' .
        'ADDTIME(g.time, SEC_TO_TIME(g.timeslotlength*60-1)) BETWEEN :starttime AND :endtime) AND ' .
        'g.location_id = :location';

      return $this->getEntityManager()
        //->createQuery($q)
        ->createNativeQuery($q, $rsm)
        ->setParameter('date', $game->getDate()->format('Y-m-d'))
        ->setParameter('starttime', $game->getTime()->format('H:i:s'))
        ->setParameter('endtime', $game->getEndTime(true)->format('H:i:s'))
        ->setParameter('gameid', $game->getId())
        ->setParameter('location', $game->getLocation()->getId())
        ->getResult();
    } else {
      $q = 'SELECT id FROM Game g WHERE ' .
        'g.id != :gameid AND ' .
        $p .
        'g.date=:date AND ' .
        '(g.time BETWEEN :starttime AND :endtime OR ' .
        'ADDTIME(g.time, SEC_TO_TIME(g.timeslotlength*60-1)) BETWEEN :starttime AND :endtime)';

      return $this->getEntityManager()
        //->createQuery($q)
        ->createNativeQuery($q, $rsm)
        ->setParameter('date', $game->getDate()->format('Y-m-d'))
        ->setParameter('starttime', $game->getTime()->format('H:i:s'))
        ->setParameter('endtime', $game->getEndTime(true)->format('H:i:s'))
        ->setParameter('gameid', $game->getId())
        ->getResult();
    }
  }

  /**
   * @param Game $game
   * @param Team $team
   * @return array
   */
  public function findTeamGameConflicts(&$game, $team)
  {
    if (!isset($team['id'])) return [];

    $dbConn = $this->getEntityManager()->getConnection();

    $qb = $dbConn->createQueryBuilder();

    $qb->addSelect([
      'game.id     AS id',
      'game.number AS number',
      'game.date   AS date',
      'game.time   AS time',
    ]);
    $qb->from('Game','game');

    $qb->leftJoin('game', 'project_game_teams', 'game_team', 'game_team.project_game_id = game.id');

    $qb->andWhere('game.id <> ?');
    $qb->andWhere('game.date = ?');
    $qb->andWhere(
      '(game.time BETWEEN ? AND ?) OR ' .
      '(ADDTIME(game.time, SEC_TO_TIME(game.timeslotlength*60-1)) BETWEEN ? AND ?)'
    );
    $qb->andWhere('game_team.project_team_id = ?');

    if ($game['is_active']) {
      $qb->andWhere('game.published = 1 AND game.status in (0,1,2)'); // jp-inactive
    }

    $gameDate      = $game['date']->format('Y-m-d');
    $gameTimeStart = $game['time']->format('H:i:s');
    $gameTimeEnd   = $game['end_time']->format('H:i:s');

    $params = [
      $game['id'],
      $gameDate,
      $gameTimeStart,$gameTimeEnd,$gameTimeStart,$gameTimeEnd,
      $team['id'],
    ];
    $types = [
      \PDO::PARAM_INT,
      \PDO::PARAM_STR,
      \PDO::PARAM_STR,\PDO::PARAM_STR,\PDO::PARAM_STR,\PDO::PARAM_STR,
      \PDO::PARAM_INT,
    ];
    $stmt = $dbConn->executeQuery($qb->getSQL(),$params,$types);
    $conflicts = [];
    while($row = $stmt->fetch()) {
      $conflicts[$row['id']] = $row;
    }
    //print_r($conflicts);
    return array_values($conflicts);

    /*

    if (empty($team))
      return array();

    //$starttime = $game->getTime();
    //$endtime = $game->getEndTime();

    $rsm = new ResultSetMapping();
    $rsm->addEntityResult('SchedulerBundle:Game', 'g');
    $rsm->addFieldResult('g', 'id', 'id');

    if ($game->isActive()) {
      $p =
        'g.published=1 AND ' .
        'g.status in (1,2) AND ';
    } else {
      $p = '';
    }
*/
    /*      if ($game->getLocation() != NULL) {
          $q = 'SELECT id FROM Game g WHERE '.
            'g.id != :gameid AND '.
            $p.
            'g.published=1 AND '.
            'g.status in (1,2) AND '.
            'g.date = :date AND '.
            '(g.time BETWEEN :starttime AND :endtime OR '.
            'ADDTIME(g.time, SEC_TO_TIME(g.timeslotlength*60-1)) BETWEEN :starttime AND :endtime) AND '.
            'g.location_id = :location AND '.
            '(g.team1_id = :team OR g.team2_id = :team)';

          return $this->getEntityManager()
            ->createNativeQuery($q, $rsm)
            ->setParameter('date', $game->getDate()->format('Y-m-d'))
            ->setParameter('starttime', $game->getTime()->format('H:i:s'))
            ->setParameter('endtime', $game->getEndTime(true)->format('H:i:s'))
            ->setParameter('gameid', $game->getId())
            ->setParameter('location', $game->getLocation()->getId())
            ->setParameter('team', $team->getId())
            ->getResult();
          } else {
    */
    /*
    $q = 'SELECT id FROM Game g WHERE ' .
      'g.id != :gameid AND ' .
      $p .
      //'g.published=1 AND '.
      //'g.status in (1,2) AND '.
      'g.date = :date AND ' .
      '(g.time BETWEEN :starttime AND :endtime OR ' .
      'ADDTIME(g.time, SEC_TO_TIME(g.timeslotlength*60-1)) BETWEEN :starttime AND :endtime) AND ' .
      '(g.team1_id = :team OR g.team2_id = :team)';

    return $this->getEntityManager()
      ->createNativeQuery($q, $rsm)
      ->setParameter('date', $game->getDate()->format('Y-m-d'))
      ->setParameter('starttime', $game->getTime()->format('H:i:s'))
      ->setParameter('endtime', $game->getEndTime(true)->format('H:i:s'))
      ->setParameter('gameid', $game->getId())
      ->setParameter('team', $team->getId())
      ->getResult();
//      }
    */
  }

  /**
   * @param Game $game
   * @param User $official
   * @return array
   */
  public function findOfficialGameConflicts($game, $official)
  {
    if (!isset($official['id'])) return [];

    $dbConn = $this->getEntityManager()->getConnection();

    $qb = $dbConn->createQueryBuilder();

    $qb->addSelect([
      'game.id     AS id',
      'game.number AS number',
      'game.date   AS date',
      'game.time   AS time',
    ]);
    $qb->from('Game','game');

    $qb->leftJoin('game', 'project_game_officials', 'game_official', 'game_official.project_game_id = game.id');

    $qb->andWhere('game.id <> ?');
    $qb->andWhere('game.date = ?');
    $qb->andWhere(
      '(game.time BETWEEN ? AND ?) OR ' .
      '(ADDTIME(game.time, SEC_TO_TIME(game.timeslotlength*60-1)) BETWEEN ? AND ?)'
    );
    // Future: Allow checking multiple officials in one query
    $qb->andWhere('game_official.project_official_id IN (?)');

    if ($game['is_active']) {
      $qb->andWhere('game.published = 1 AND game.status in (1,2)');
    }

    $gameDate      = $game['date']->format('Y-m-d');
    $gameTimeStart = $game['time']->format('H:i:s');
    $gameTimeEnd   = $game['end_time']->format('H:i:s');

    $params = [
      $game['id'],
      $gameDate,
      $gameTimeStart,$gameTimeEnd,$gameTimeStart,$gameTimeEnd,
      [$official['id']],
    ];
    $types = [
      \PDO::PARAM_INT,
      \PDO::PARAM_STR,
      \PDO::PARAM_STR,\PDO::PARAM_STR,\PDO::PARAM_STR,\PDO::PARAM_STR,
      Connection::PARAM_INT_ARRAY,
    ];
    $stmt = $dbConn->executeQuery($qb->getSQL(),$params,$types);
    $conflicts = [];
    while($row = $stmt->fetch()) {
      $conflicts[$row['id']] = $row;
    }
    //print_r($conflicts);
    return array_values($conflicts);
/*
    $q = 'SELECT id FROM Game g WHERE ' .
      'g.id != :gameid AND ' .
      $p .
      'g.date = :date AND ' .
      '(g.time BETWEEN :starttime AND :endtime OR ' .
      'ADDTIME(g.time, SEC_TO_TIME(g.timeslotlength*60-1)) BETWEEN :starttime AND :endtime) AND ' .
      '(g.ref1_id = :ref OR g.ref2_id = :ref OR g.ref3_id = :ref)';
*/
  }

  /**
   * @param boolean $onlyPublished
   * @param GameListCriteria $criteria
   * @return array
   */
  public function findByCriteria($onlyPublished, GameListCriteria $criteria)
  {
    $startdate = $criteria->getStartDate()->format('Y-m-d');
    //$starttime = $criteria->getStartTime()->format('H:i:00');
    $enddate = $criteria->getEndDate()->format('Y-m-d');
    //$endtime = $criteria->getEndTime()->format('H:i:00');
    $official = $criteria->getOfficial();
    $location = $criteria->getLocation();
    $team = $criteria->getCoach();
    $offList = '';
    $locationList = '';
    $teamList = '';

    if ($official != '') {
      // returns array of ids that match official name
      //$q = 'SELECT u.id FROM SchedulerBundle:User u WHERE u.first_name LIKE :official OR u.last_name LIKE :official';
      $q = 'SELECT u.id FROM SchedulerBundle:User u WHERE CONCAT(u.first_name, CONCAT(\' \', u.last_name)) LIKE :official';
      $r = $this->getEntityManager()
        ->createQuery($q)
        ->setParameter('official', '%' . $official . '%')
        ->getResult();
      if (empty($r))
        return array();

      // comma-seperated list of ids
      foreach ($r as $user) {
        $ids[] = $user['id'];
      }
      $offList = implode(',', $ids);
    }

    if ($location != '') {
      // returns array of ids that match location
      $q = 'SELECT l.id FROM SchedulerBundle:Location l WHERE l.name LIKE :location';
      $r = $this->getEntityManager()
        ->createQuery($q)
        ->setParameter('location', '%' . $location . '%')
        ->getResult();
      if (empty($r))
        return array();

      // comma-seperated list of ids
      foreach ($r as $loc) {
        $ids[] = $loc['id'];
      }
      $locationList = implode(',', $ids);
    }

    if ($team != '') {
      // returns array of ids that match location
      $q = 'SELECT t.id FROM SchedulerBundle:Team t WHERE t.coach LIKE :team OR t.name LIKE :team';
      $r = $this->getEntityManager()
        ->createQuery($q)
        ->setParameter('team', '%' . $team . '%')
        ->getResult();
      if (empty($r))
        return array();

      // comma-seperated list of ids
      foreach ($r as $t) {
        $ids[] = $t['id'];
      }
      $teamList = implode(',', $ids);
    }

    $q = 'SELECT g FROM SchedulerBundle:Game g'
      . ' WHERE'
      . ' g.date BETWEEN :startdate AND :enddate'
      //. ' AND'
      //. ' g.time BETWEEN :starttime AND :endtime'
    ;

    if ($offList) {
      //$q .= ' AND (g.ref1 in ('.$offList.') OR g.ref2 in ('.$offList.'))';
      $q .= ' AND (g.ref1 in (' . $offList . ') OR g.ref2 in (' . $offList . ') OR g.ref3 in (' . $offList . '))';
    }

    if ($locationList) {
      $q .= ' AND g.location in (' . $locationList . ')';
    }

    if ($teamList) {
      $q .= ' AND (g.team1 in (' . $teamList . ') OR g.team2 in (' . $teamList . '))';
    }

    if ($onlyPublished) {
      $q .= ' AND g.published = 1';
    }

    $q .= ' ORDER BY g.date ASC, g.time ASC, g.number ASC, g.id ASC, g.location ASC';

    $query = $this->getEntityManager()
      ->createQuery($q)
      ->setParameter('startdate', $startdate)
      //->setParameter('starttime', $starttime)
      ->setParameter('enddate', $enddate)//->setParameter('endtime', $endtime)
    ;

    return $query->getResult();
  }

  /**
   * FIXME: This duplicates the same function in ProjectBundle\EntityRepository\ProjectGameRepositorySql
   * 
   * @param $projectId
   * @return null|integer
   */
  public function maxGameNumber($projectId)
  {
    $dbConn = $this->getEntityManager()->getConnection();
    $sql = 'SELECT MAX(number) AS max FROM Game WHERE project_id = ?;';
    $stmt = $dbConn->executeQuery($sql,[$projectId]);
    $rows = $stmt->fetchAll();
    return count($rows) === 0 ? null : $rows[0]['max'];
  }
}
